cmake_minimum_required(VERSION 2.8)
enable_testing()
project(SkyPlanner)
set(MAJOR_VERSION 1)
set(MINOR_VERSION 0)
set(PATCH_VERSION 0)
set(SkyPlanner_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/" ${CMAKE_SOURCE_DIR}/GuLinux-Commons/cmake)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
option(DOCKER_ONLY "Generates only docker makefiles" Off)
if(DOCKER_ONLY)
  add_subdirectory(docker)
else(DOCKER_ONLY)
  enable_testing()
  set(DATA_DIR "/var" CACHE STRING "Data and caching directory (default: var)")
  add_definitions(-DSHARED_PREFIX="${CMAKE_INSTALL_PREFIX}/share/SkyPlanner")

  add_definitions(-DDATA_DIR="${DATA_DIR}")
  find_package(Wt 3.3.1 REQUIRED)
  find_package(OpenCV REQUIRED)
  find_package(GraphicsMagick REQUIRED)
  include_directories(${GraphicsMagick_INCLUDE_DIR})

  find_package(Boost REQUIRED COMPONENTS signals system filesystem chrono thread regex program_options random date_time OPTIONAL_COMPONENTS unit_test_framework )
  if(Wt_DBOPOSTGRES_LIBRARY)
      add_definitions(-DHAVE_WT_POSTGRES)
  endif(Wt_DBOPOSTGRES_LIBRARY)
  set(PRODUCTION_MODE OFF CACHE BOOL "Enable Production Mode")
  if(PRODUCTION_MODE)
      add_definitions(-DPRODUCTION_MODE)
  endif(PRODUCTION_MODE)

  set(DISABLE_HARU OFF CACHE BOOL "Disable LibHaru PDF Export")
  if(DISABLE_HARU)
      add_definitions(-DDISABLE_LIBHARU)
  else(DISABLE_HARU)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${LIBHARU_PREFIX}/lib")
    set(HARU_LIBRARY hpdf CACHE STRING "hpdf library name (default: hpdf)")
  endif(DISABLE_HARU)

  include_directories(${Wt_INCLUDE_DIR} ${Boost_INCLUDE_DIR})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -fstack-protector-all")
  set(HAVE_WT_JSON_SERIALIZE On CACHE STRING "" FORCE)

  set(EXTRA_LIBS "" CACHE STRING "Extra linking libraries")

  #add_subdirectory(lib)
  include_directories(GuLinux-Commons/Wt GuLinux-Commons)
  add_subdirectory(GuLinux-Commons/Wt)
  add_subdirectory(GuLinux-Commons/c++)
  include_directories(src)
  add_subdirectory(src)
  add_subdirectory(resources)
  add_subdirectory(strings)
  add_subdirectory(CatalogsParsing)

  add_subdirectory(tests)
  add_subdirectory(support)
  add_subdirectory(docker)
  add_subdirectory(data)

  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "GuLinux.net SkyPlanner")
  SET(CPACK_PACKAGE_VENDOR "GuLinux <marco@gulinux.net>")
  #SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
  #SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/src/")
  SET(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
  SET(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
  SET(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
  SET(CPACK_PACKAGE_CONTACT "marco@gulinux.net")
  #SET(CPACK_STRIP_FILES "bin/planetary_imager")
  SET(CPACK_GENERATOR DEB)
  SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libwt38 ( >= 3.3.1 ), libwthttp38, libwtdbosqlite38, libwtdbopostgres38, libgraphicsmagick++11, libboost-signals1.58.0, libboost-chrono1.58.0, libboost-thread1.58.0, libboost-regex1.58.0, libboost-system1.58.0, libboost-filesystem1.58.0, libboost-random1.58.0, libboost-date-time1.58.0, libboost-program-options1.58.0, libcurl3, libnova-0.14-0")
  INCLUDE(CPack)
endif(DOCKER_ONLY)
