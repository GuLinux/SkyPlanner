#!/bin/bash
EXPOSE_PORT=8080
ENV_NAME="testing"
CREATE_DB="false"
WT_CONFIG_FILE=""

while [[ -n "$1"  && "$1" != "--" ]]; do
  case "$1" in
    -e|--environment)
      ENV_NAME="$2"; shift
      ;;
    -p|--port)
      EXPOSE_PORT="$2"; shift
      ;;
    -d|--create-database-container)
      CREATE_DB="true"
      ;;
    -c|--configuration-file)
      WT_CONFIG_FILE="$( readlink -f "$2")"; shift
      ;;
    *)
      echo "Usage: $0 [-e|--environment environment-name] [-p|--port port] [-d|--create-database-container] [-c|--configuration-file file]" >&2
      exit 1
      ;;
  esac
  shift
done
shift

remove_container() {
  is_running="$( docker inspect -f "{{.State.Running}}" "$1" 2>/dev/null )"
  [[ "$?" != "0" ]] && return
  [[ "$is_running" == "true" ]] && docker stop "$1"
  docker rm -f "$1"
}

DB_CONTAINER_NAME="skyplanner-${ENV_NAME}-postgres"
CONTAINER_NAME="skyplanner-${ENV_NAME}"
NETWORK_NAME="skyplanner-net-$ENV_NAME"
[[ -n "$WT_CONFIG_FILE" ]] && WT_CONFIG_VOLUME="-v \"$WT_CONFIG_FILE\":/etc/wt/wt_config.xml:ro"

docker network inspect "$NETWORK_NAME" >/dev/null 2>&1 || docker network create $NETWORK_NAME

[[ "$CREATE_DB" == true ]] && ( remove_container "$DB_CONTAINER_NAME";  docker create --name "$DB_CONTAINER_NAME" -e POSTGRES_PASSWORD=skyplanner --net $NETWORK_NAME -v /var/lib/postgresql-skyplanner-${ENV_NAME}/:/var/lib/postgresql skyplanner-postgres-img )
remove_container "$CONTAINER_NAME"
db_connection_string="-e SKYPLANNER_PSQL_CONNECTION=\"application_name=SkyPlanner host=$DB_CONTAINER_NAME port=5432 dbname=skyplanner user=postgres password=skyplanner\""
eval "docker create -p 127.0.0.1:${EXPOSE_PORT}:8080 --name \"$CONTAINER_NAME\" --net $NETWORK_NAME $WT_CONFIG_VOLUME $db_link $db_connection_string $@ skyplanner-ubuntu-run-img-${ENV_NAME}"


